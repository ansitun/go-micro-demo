// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/go-micro-demo.proto

package gomicrodemo

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for GoMicroDemo service

func NewGoMicroDemoEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for GoMicroDemo service

type GoMicroDemoService interface {
	Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error)
	ClientStream(ctx context.Context, opts ...client.CallOption) (GoMicroDemo_ClientStreamService, error)
	ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (GoMicroDemo_ServerStreamService, error)
	BidiStream(ctx context.Context, opts ...client.CallOption) (GoMicroDemo_BidiStreamService, error)
}

type goMicroDemoService struct {
	c    client.Client
	name string
}

func NewGoMicroDemoService(name string, c client.Client) GoMicroDemoService {
	return &goMicroDemoService{
		c:    c,
		name: name,
	}
}

func (c *goMicroDemoService) Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error) {
	req := c.c.NewRequest(c.name, "GoMicroDemo.Call", in)
	out := new(CallResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goMicroDemoService) ClientStream(ctx context.Context, opts ...client.CallOption) (GoMicroDemo_ClientStreamService, error) {
	req := c.c.NewRequest(c.name, "GoMicroDemo.ClientStream", &ClientStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &goMicroDemoServiceClientStream{stream}, nil
}

type GoMicroDemo_ClientStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Send(*ClientStreamRequest) error
}

type goMicroDemoServiceClientStream struct {
	stream client.Stream
}

func (x *goMicroDemoServiceClientStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *goMicroDemoServiceClientStream) Close() error {
	return x.stream.Close()
}

func (x *goMicroDemoServiceClientStream) Context() context.Context {
	return x.stream.Context()
}

func (x *goMicroDemoServiceClientStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *goMicroDemoServiceClientStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *goMicroDemoServiceClientStream) Send(m *ClientStreamRequest) error {
	return x.stream.Send(m)
}

func (c *goMicroDemoService) ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (GoMicroDemo_ServerStreamService, error) {
	req := c.c.NewRequest(c.name, "GoMicroDemo.ServerStream", &ServerStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &goMicroDemoServiceServerStream{stream}, nil
}

type GoMicroDemo_ServerStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Recv() (*ServerStreamResponse, error)
}

type goMicroDemoServiceServerStream struct {
	stream client.Stream
}

func (x *goMicroDemoServiceServerStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *goMicroDemoServiceServerStream) Close() error {
	return x.stream.Close()
}

func (x *goMicroDemoServiceServerStream) Context() context.Context {
	return x.stream.Context()
}

func (x *goMicroDemoServiceServerStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *goMicroDemoServiceServerStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *goMicroDemoServiceServerStream) Recv() (*ServerStreamResponse, error) {
	m := new(ServerStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *goMicroDemoService) BidiStream(ctx context.Context, opts ...client.CallOption) (GoMicroDemo_BidiStreamService, error) {
	req := c.c.NewRequest(c.name, "GoMicroDemo.BidiStream", &BidiStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &goMicroDemoServiceBidiStream{stream}, nil
}

type GoMicroDemo_BidiStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Send(*BidiStreamRequest) error
	Recv() (*BidiStreamResponse, error)
}

type goMicroDemoServiceBidiStream struct {
	stream client.Stream
}

func (x *goMicroDemoServiceBidiStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *goMicroDemoServiceBidiStream) Close() error {
	return x.stream.Close()
}

func (x *goMicroDemoServiceBidiStream) Context() context.Context {
	return x.stream.Context()
}

func (x *goMicroDemoServiceBidiStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *goMicroDemoServiceBidiStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *goMicroDemoServiceBidiStream) Send(m *BidiStreamRequest) error {
	return x.stream.Send(m)
}

func (x *goMicroDemoServiceBidiStream) Recv() (*BidiStreamResponse, error) {
	m := new(BidiStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for GoMicroDemo service

type GoMicroDemoHandler interface {
	Call(context.Context, *CallRequest, *CallResponse) error
	ClientStream(context.Context, GoMicroDemo_ClientStreamStream) error
	ServerStream(context.Context, *ServerStreamRequest, GoMicroDemo_ServerStreamStream) error
	BidiStream(context.Context, GoMicroDemo_BidiStreamStream) error
}

func RegisterGoMicroDemoHandler(s server.Server, hdlr GoMicroDemoHandler, opts ...server.HandlerOption) error {
	type goMicroDemo interface {
		Call(ctx context.Context, in *CallRequest, out *CallResponse) error
		ClientStream(ctx context.Context, stream server.Stream) error
		ServerStream(ctx context.Context, stream server.Stream) error
		BidiStream(ctx context.Context, stream server.Stream) error
	}
	type GoMicroDemo struct {
		goMicroDemo
	}
	h := &goMicroDemoHandler{hdlr}
	return s.Handle(s.NewHandler(&GoMicroDemo{h}, opts...))
}

type goMicroDemoHandler struct {
	GoMicroDemoHandler
}

func (h *goMicroDemoHandler) Call(ctx context.Context, in *CallRequest, out *CallResponse) error {
	return h.GoMicroDemoHandler.Call(ctx, in, out)
}

func (h *goMicroDemoHandler) ClientStream(ctx context.Context, stream server.Stream) error {
	return h.GoMicroDemoHandler.ClientStream(ctx, &goMicroDemoClientStreamStream{stream})
}

type GoMicroDemo_ClientStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ClientStreamRequest, error)
}

type goMicroDemoClientStreamStream struct {
	stream server.Stream
}

func (x *goMicroDemoClientStreamStream) Close() error {
	return x.stream.Close()
}

func (x *goMicroDemoClientStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *goMicroDemoClientStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *goMicroDemoClientStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *goMicroDemoClientStreamStream) Recv() (*ClientStreamRequest, error) {
	m := new(ClientStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *goMicroDemoHandler) ServerStream(ctx context.Context, stream server.Stream) error {
	m := new(ServerStreamRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.GoMicroDemoHandler.ServerStream(ctx, m, &goMicroDemoServerStreamStream{stream})
}

type GoMicroDemo_ServerStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ServerStreamResponse) error
}

type goMicroDemoServerStreamStream struct {
	stream server.Stream
}

func (x *goMicroDemoServerStreamStream) Close() error {
	return x.stream.Close()
}

func (x *goMicroDemoServerStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *goMicroDemoServerStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *goMicroDemoServerStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *goMicroDemoServerStreamStream) Send(m *ServerStreamResponse) error {
	return x.stream.Send(m)
}

func (h *goMicroDemoHandler) BidiStream(ctx context.Context, stream server.Stream) error {
	return h.GoMicroDemoHandler.BidiStream(ctx, &goMicroDemoBidiStreamStream{stream})
}

type GoMicroDemo_BidiStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*BidiStreamResponse) error
	Recv() (*BidiStreamRequest, error)
}

type goMicroDemoBidiStreamStream struct {
	stream server.Stream
}

func (x *goMicroDemoBidiStreamStream) Close() error {
	return x.stream.Close()
}

func (x *goMicroDemoBidiStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *goMicroDemoBidiStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *goMicroDemoBidiStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *goMicroDemoBidiStreamStream) Send(m *BidiStreamResponse) error {
	return x.stream.Send(m)
}

func (x *goMicroDemoBidiStreamStream) Recv() (*BidiStreamRequest, error) {
	m := new(BidiStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
